function upload_rsa_keys(e,r,a,s){if(!lploggedin)return void console_log("RSA : upload_rsa_keys : from="+e+" : returning because we are not logged in");var s="undefined"==typeof forcewriteprivatearg||0==forcewriteprivatearg?0:forcewriteprivatearg;a?console_log("RSA : upload_rsa_keys : from="+e+" : getting rsa keys from server : forcewriteprivate="+s):console_log("RSA : upload_rsa_keys : from="+e+" : created new rsa keys and uploading to server : forcewriteprivate="+s);var t="",n="";a?console_log("RSA : upload_rsa_keys : NOT wrapping and CBC encrypting privatekey -- that should have already been done"):(console_log("RSA : upload_rsa_keys : wrapping and CBC encrypting privatekey"),t=void 0!==r.publickey?r.publickey:encode_public_key(r),n=rsa_encrypt_privatekey(void 0!==r.privatekey?r.privatekey:encode_private_key(r),g_local_key));var o=g_local_key,p="";null!=o&&""!=o&&(p=AES.bin2hex(o),p=p.toUpperCase());var l=""==p?"":SHA256(p),i=""==p?"":SHA256(n);console_log("RSA : upload_rsa_keys : -- uploading privatekeyenchexhash="+i),console_log("RSA : upload_rsa_keys : -- uploading publickey="+t);var c="privatekeyenc="+LP.en(n);c+="&publickey="+LP.en(t),c+="&forcewriteprivate="+LP.en(s),c+="&userkeyhexhash="+LP.en(l),c+="&privatekeyenchexhash="+LP.en(i),c+="&from="+LP.en("crplugin"),lpMakeRequest(base_url+"uploadrsakeys.php",c,upload_rsa_keys_response,null)}function upload_rsa_keys_response(e){if(4==e.readyState&&200==e.status&&e.responseXML&&e.responseXML.documentElement){var r=e.responseXML.documentElement,a=r.getElementsByTagName("ok"),s="";a.length>0&&(s=a[0].getAttribute("privatekeyenchex"),console_log("RSA : upload_rsa_keys_response : got uploadrsakeys response : server returned privatekeyenchex="+s),null!=s&&""!=s&&(console_log("RSA : upload_rsa_keys_response : calling writersaprivatekeyenchextodb()"),writersaprivatekeyenchextodb(s),console_log("RSA : upload_rsa_keys_response : calling readrsaprivatekeyhexfromdb()"),readrsaprivatekeyhexfromdb(!0,null,null,function(){g_shares&&g_shares.length>0&&(console_log("RSA : upload_rsa_keys_response found shares: reparse!"),get_accts_local(!0,"refetchsharing"))})))}}function writersaprivatekeyenchextodb(e){if(console_log("RSA : writersaprivatekeyenchextodb : writing privatekeyenchex to db"),null==g_username||""==g_username)return void console_log("RSA : writersaprivatekeyenchextodb : FAILED because g_username is blank");lpSaveData(e,"rsakey")}function readrsaprivatekeyhexfromdb(e,r,a,s){if(g_nosharingkeys)return void console_log("RSA : readrsaprivatekeyhexfromdb : FAILED because g_nosharingkeys==TRUE");if(null==g_username||""==g_username||null==g_local_key)return void console_log("RSA : readrsaprivatekeyhexfromdb : FAILED because g_username is blank");if(!((void 0!==e&&e?1:0)||""==lp_rsaprivatekeyhex||a&&SHA256(lp_rsaprivatekeyenchex)!=a))return console_log("RSA : readrsaprivatekeyhexfromdb : returning a cached value"),console_log("RSA : readrsaprivatekeyhexfromdb : -- lp_rsaprivatekeyhex="+lp_rsaprivatekeyhex),console_log("RSA : readrsaprivatekeyhexfromdb : -- SHA256(lp_rsaprivatekeyenchex)="+SHA256(lp_rsaprivatekeyenchex)),console_log("RSA : readrsaprivatekeyhexfromdb : --               comparetohash="+a),void(s&&s(lp_rsaprivatekeyhex));rsa_clearvars(),console_log("RSA : readrsaprivatekeyhexfromdb : trying to read from db");var t=opendb();if(createDataTable(t),t){var n=function(e,t){if(t.rows.length>0){var n=t.rows.item(0).data;if(""==n||null==n)return console_log("RSA : readrsaprivatekeyhexfromdb : FAILED to find in db"),void DeleteFromDB("rsakey");if(a&&SHA256(n)!=a)return console_log("RSA : readrsaprivatekeyhexfromdb : found in db, but hash does not match!"),console_log("RSA : readrsaprivatekeyhexfromdb : -- datahex="+n),console_log("RSA : readrsaprivatekeyhexfromdb : -- SHA256(datahex)="+SHA256(n)),console_log("RSA : readrsaprivatekeyhexfromdb : --   comparetohash="+a),DeleteFromDB("rsakey"),void(0==g_privkeyattempts?(console_log("RSA : readrsaprivatekeyhexfromdb : GET IT FROM THE SERVER A"),g_privkeyattempts=1,setTimeout(function(){console.error("BAH!!!"),upload_rsa_keys("GetA",null,!0)},500)):console_log("RSA : readrsaprivatekeyhexfromdb : NOT GETTING IT FROM THE SERVER BECAUSE g_privkeyattempts="+g_privkeyattempts));console_log("RSA : readrsaprivatekeyhexfromdb : found it in the db: datahex="+n),console_log("RSA : readrsaprivatekeyhexfromdb : trying to decrypt using CBC");var o=rsa_extract_privatekey(n,g_local_key);if(!o)return console_log("RSA : readrsaprivatekeyhexfromdb : FAILED to decrypt/extract private key : decryptedbin.length="+decryptedbin.length),lpReportError("readrsaprivatekeyhexfromfile : failed to extract rsa key from file - did we change our password on another PC? datahex.length="+n.length+" decryptedbin.length="+decryptedbin.length),void DeleteFromDB("rsakey");console_log("RSA : readrsaprivatekeyhexfromdb : successfully decrypted using CBC and extracted plaintext private key"),lp_rsaprivatekeyenchex=n,lp_rsaprivatekeyhex=o,lp_rsaprivatekeyenchexserverhash=SHA256(lp_rsaprivatekeyenchex),console_log("RSA : readrsaprivatekeyhexfromdb : SUCCESS"),console_log("RSA : readrsaprivatekeyhexfromdb : -- setting lp_rsaprivatekeyhex="+lp_rsaprivatekeyhex),console_log("RSA : readrsaprivatekeyhexfromdb : -- setting lp_rsaprivatekeyenchexserverhash="+lp_rsaprivatekeyenchexserverhash),s&&s(lp_rsaprivatekeyhex),g_shares&&1==g_shares.length&&0==g_shares[0].id&&(console_log("RSA : readrsaprivatekeyhexfromdb : Shared folder found, we just got the key, reparse!"),get_accts_local())}else console_log("RSA : readrsaprivatekeyhexfromdb : FAILED to find in db"),r&&(console_log("RSA : readrsaprivatekeyhexfromdb : GET IT FROM THE SERVER B"),upload_rsa_keys("GetB",null,!0))};if(g_indexeddb){var o={rows:{item:function(e){return this[e]},length:0}};t.transaction("LastPassData","readonly").objectStore("LastPassData").openCursor(IDBKeyRange.only(db_prepend(g_username_hash)+"_rsakey")).onsuccess=function(e){var r=e.target.result;r?(o.rows[o.rows.length]=r.value,o.rows.length++,r.continue()):n(0,o)}}else t.transaction(function(e){e.executeSql("SELECT * FROM LastPassData WHERE username_hash=? AND type=?",[db_prepend(g_username_hash),"rsakey"],n,function(e,r){console_log(r)})})}}function rsa_userchangedpassword(){console_log("rsa_userchangedpassword : called"),DeleteFromDB("rsakey"),rsa_clearvars()}function rsa_clearvars(){console_log("rsa_clearvars : called"),lp_rsaprivatekeyhex="",lp_rsaprivatekeyenchex="",lp_rsaprivatekeyenchexserverhash=""}function rsa_setpendingsharests(e){lppendingsharests=void 0!==e&&e?0:(new Date).getTime()}function rsa_acceptpendingshares(e){if(lploggedin&&!lploggedinoffline&&null!=g_local_key){if(""==lp_rsaprivatekeyhex)return void(e||(console_log("RSA : rsa_acceptpendingshares : calling readrsaprivatekeyhexfromdb()"),readrsaprivatekeyhexfromdb(!1,null,null,rsa_acceptpendingshares)));if(rsaprivatekeyhex=lp_rsaprivatekeyhex,0!=g_pendings.length){if((new Date).getTime()-lppendingsharests<1e4)return void console_log("lprsa_acceptpendingshares : skipping because we were already called very recently");rsa_setpendingsharests();var r=[];for(var a in g_pendings){var s=g_pendings[a];if(1==s.shareautoaccept){var t="",n="";if(have_nplastpass()&&"function"==typeof g_nplastpass.xCryptoRSADecrypt)t=g_nplastpass.xCryptoRSADecrypt(rsaprivatekeyhex,s.sharekeyenchex),n=AES.hex2bin(t);else{var o=new RSAKey;if(!parse_private_key(o,lp_rsaprivatekeyhex))return void console_error("Private key could not be parsed while auto accepting shares");var p=s.sharekeyenchex;n=o.decrypt(p),t=AES.bin2hex(n)}if(""==n)return void console_error("Share key bin empty while auto accepting shares");var l=dec(s.sharename,n),i=dec(s.sharegroup,n),c=dec(s.username,n),u=dec(s.password,n),d=dec(s.extra,n),h=!0,_={};for(a in s.shareafids)if(_[a]=dec(s.shareafids[a],n),""!=s.shareafids[a]&&""==_[a]){h=!1;break}if(""!=s.sharename&&""==l||""!=s.sharegroup&&""==i||""!=s.username&&""==c||""!=s.password&&""==u||""!=s.extra&&""==d||!h)lpReportError("lprsa_acceptpendingshares : failing autoaccept of share because we failed to decrypt at least one value");else{var g=lpenc(l),v=lpenc(i),y=lpenc(c),f=lpenc(u),k=lpenc(d),h=!0,x={};for(a in _)if(x[a]=lpenc(_[a]),""!=_[a]&&""==x[a]){h=!1;break}if(""!=l&&""==g||""!=i&&""==v||""!=c&&""==y||""!=u&&""==f||""!=d&&""==k||!h)lpReportError("lprsa_acceptpendingshares : failing autoaccept of share because we failed to reencrypt at least one value");else{var m={aid:s.id,name:g,group:v,username:y,password:f,extra:k},b=0;for(a in x)m["afid"+b]=a,m["afidv"+b]=x[a],++b;m.numafids=b,r.push(m)}}}}if(r.length>0){var S="cmd="+LP.en("autoacceptshares")+"&from="+LP.en("crplugin")+"&numshares="+LP.en(r.length),A=0;for(var a in r){var R="&share"+A;++A;for(var E in r[a])S+=R+E+"="+LP.en(r[a][E])}console_log("rsa_acceptpendingshares : issuing server request to autoaccept "+r.length+" shares"),lpMakeRequest(base_url+"showacceptshare.php",S,rsa_acceptpendingsharesresponse)}else console_log("rsa_acceptpendingshares : no shares to autoaccept so not issuing server request")}}}function rsa_acceptpendingsharesresponse(e){if(4==e.readyState){if(console_log("rsa_acceptpendingsharesresponse : received response from server"),200!=e.status)return void lpReportError("lprsa_acceptpendingsharesresponse : request failed status="+e.status);if(null==e.responseXML||null==e.responseXML.documentElement)return void lpReportError("lprsa_acceptpendingsharesresponse : request failed xml invalid A text="+e.responseText);var r=e.responseXML.documentElement,a=r.getElementsByTagName("ok");if(!a||0==a.length)return void lpReportError("lprsa_acceptpendingsharesresponse : request failed xml invalid B text="+e.responseText);get_accts()}}function rsa_setshareeautopushests(e){g_shareeautopushests=void 0!==e&&e?0:(new Date).getTime()}function rsa_acceptshareeautopushes(){var e=!1;for(var r in g_shareeautopushes){e=!0;break}if(e&&lploggedin&&!lploggedinoffline&&null!=g_local_key){(new Date).getTime()-lpshareeautopushests<1e4||(rsa_setshareeautopushests(),console_log("RSA : rsa_acceptshareeautopushes : calling readrsaprivatekeyhexfromdb()"),readrsaprivatekeyhexfromdb(!1,null,null,rsa_acceptshareeautopushes2))}}function rsa_acceptshareeautopushes2(e){var r=[];for(var a in g_shareeautopushes)for(var s in g_shareeautopushes[a]){var t=g_shareeautopushes[a][s],n="";if(have_nplastpass()&&"function"==typeof g_nplastpass.xCryptoRSADecrypt){var o=g_nplastpass.xCryptoRSADecrypt(e,t.sharekeyhexenc);n=AES.hex2bin(o)}else{var p=new RSAKey;if(!parse_private_key(p,e))return void console_error("Private key could not be parsed while auto accepting shares");n=p.decrypt(t.sharekeyhexenc)}if(""!=n&&null!=n){var l=reencryptShareeAutoPushes(n,t,a);null!=l&&(void 0===r[a]&&(r[a]=[]),r[a].push(l))}}var i="cmd="+LP.en("updateautoshareepushes")+"&from="+LP.en("ffplugin"),c=0,u=0;for(var a in r){++c;for(var d in r[a]){var h="&share"+u,t=r[a][d];for(var _ in t)i+=h+_+"="+LP.en(t[_]);++u}}i+="&numupdates="+LP.en(u),u>0?(lplastgetaccounts=0,lpMakeRequest(base_url+"showacceptshare.php",i,rsa_acceptshareeautopushesresponse)):lpdbg("sharing","lprsa_acceptshareeautopushes : no shareeautopushes so not issuing server request")}function rsa_acceptshareeautopushesresponse(e){if(4==e.readyState){if(lpdbg("sharing","lprsa_acceptshareeautopushesresponse : received response from server"),200!=e.status)return void lpReportError("lprsa_acceptshareeautopushesresponse : request failed status="+e.status);if(null==e.responseXML||null==e.responseXML.documentElement)return void lpReportError("lprsa_acceptshareeautopushesresponse : request failed xml invalid A text="+e.responseText);var r=e.responseXML.documentElement,a=r.getElementsByTagName("ok");if(!a||0==a.length)return void lpReportError("lprsa_acceptshareeautopushesresponse : request failed xml invalid B text="+e.responseText);get_accts()}}function rsa_shareeautopushesresponse(e,r){if(4!=e.readyState||200!=e.status||null==e.responseXML||null==e.responseXML.documentElement)return!1;if(void 0===r||null==r)return!1;var a=(new Date).getTime(),s=r.url,t=r.aid,n=r.handler,o=r.param,p=r.postdata,l=void 0!==r.acct?r.acct:null;null==l&&(l=void 0!==g_sites[t]?g_sites[t]:void 0!==g_securenotes[t]?g_securenotes[t]:null),null==l&&(l={},l.name="",l.group="",l.username="",l.password="",l.extra="");var p=createShareeAutoPushesResponse(e,r,l);return 0!=p&&(a=((new Date).getTime()-a)/1e3,lpdbg("sharing","Finished RSA encryption. Total time taken = "+a+" seconds"),lpdbg("sharing","Reissuing request to "+s+" with postdata="+p),lplastgetaccounts=0,lpMakeRequest(s,p,n,null,o||r),!0)}function lprsa_encryptdata(e,r){var a=null;if(have_nplastpass()&&"function"==typeof g_nplastpass.xCryptoRSAEncrypt)a=g_nplastpass.xCryptoRSAEncrypt(e,r);else{var s=new RSAKey;if(!parse_public_key(s,e))return console_error("Private key could not be parsed while auto accepting shares"),!1;a=s.encrypt(AES.hex2bin(r))}return""==r||null!=a&&""!=a?a:(lpReportError("lprsa_encryptdata : Failed to rsaencrypt data using publickeyhex="+e),!1)}function lprsa_rsadecrypt(e){if(""==lp_rsaprivatekeyhex)return null;var r;if(have_nplastpass()&&"function"==typeof g_nplastpass.xCryptoRSADecrypt)r=g_nplastpass.xCryptoRSADecrypt(lp_rsaprivatekeyhex,e);else{var a=new RSAKey;if(!parse_private_key(a,lp_rsaprivatekeyhex))return null;var s=a.decrypt(e);r=AES.bin2hex(s).toUpperCase()}return r}function lprsa_encryptmultiple(e){for(var r=JSON.parse(e),a=0;a<r.length;++a){if(void 0===r[a].valuehex||void 0===r[a].publickeyhex||""==r[a].publickeyhex)return null;if(have_nplastpass()&&"function"==typeof g_nplastpass.xCryptoRSAEncrypt)r[a].valuehexenc=g_nplastpass.xCryptoRSAEncrypt(r[a].publickeyhex,r[a].valuehex);else{var s=new RSAKey;if(!parse_public_key(s,r[a].publickeyhex))return null;r[a].valuehexenc=s.encrypt(AES.hex2bin(r[a].valuehex)).toUpperCase()}if(""==r[a].valuehexenc||null==r[a].valuehexenc)return null}return JSON.stringify(r)}var lppendingsharests=0;